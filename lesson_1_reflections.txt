1) How did viewing a diff between two versions of a file help you see the bug that was introduced?
If we have a previous version of the file, we can find and introduced bug easier by viewing the difference between versions.
We just need to look at the changed lines of the changed files.

2) How could having easy access to the entire history of a file make you a more efficient programmer in the long term?
We can use version history to:
 - Undo changes
 - compair versions for debuging

 3) What do you think are the pros and cons of manually choosing when to create a commit,
    like you do in Git, vs having versions automatically saved, like Google docs does?

Pros:
	You commit when changes are meaningfull
	You can describe a commit to make it more meaningfull

Cons:
	It's a manual process = Error prone
	It's personal. Two programmers can have two different commiting rules.

4) Why do you think some version control systems, like Git, allow saving multiple files in one commit,
while others, like Google Docs, treat each file separately?
- Git was made with programmers in mind. And each commit was designed to keep one logical change only.
In programming, one logical change may spread throug more than one file.


5) How can you use the commands git log and git diff to view the history of files?
Git log will list your commits
Git diff will compair to different commits

6) How might using version control make you more confident to make changes that could break something?
If you have commited a working version of a project, you can change it as you wish. If everything goes wrong,
you may checkout the commit that contains the workking version and everithing will go back as it was before all changes

7) Now that you have your workspace set up, what do you want to try using Git for?
Making changes on a huge old project that must be improved but can not get broken!